import numpy as np
import matplotlib.pyplot as plt
import csv

# --------------------------------------------
# File paths (update as needed)
rtl_output_file = 'results/rtl_kalman_output.txt'       # dumped by tb_fusion.sv or from VCD parser
golden_output_file = 'results/python_kalman_output.txt' # generated by gen_test_vectors.py
tolerance = 1e-3  # acceptable numerical error
# --------------------------------------------

def load_output(filename):
    """Loads scalar Kalman outputs from a text file (one value per line)"""
    with open(filename, 'r') as f:
        lines = f.readlines()
    return np.array([float(line.strip()) for line in lines if line.strip()])

def compare_outputs(rtl_out, golden_out, tolerance):
    """Compares RTL and golden values element-wise"""
    if len(rtl_out) != len(golden_out):
        print(f"Length mismatch: RTL({len(rtl_out)}) vs Golden({len(golden_out)})")
        return False

    mismatches = []
    for i, (r, g) in enumerate(zip(rtl_out, golden_out)):
        if abs(r - g) > tolerance:
            mismatches.append((i, r, g))

    if mismatches:
        print(f"\n❌ Mismatches found: {len(mismatches)}")
        for i, r, g in mismatches[:10]:  # Show only first 10
            print(f"Index {i}: RTL = {r:.6f}, Golden = {g:.6f}, Δ = {abs(r-g):.6f}")
        return False
    else:
        print("\n✅ All values match within tolerance.")
        return True

def plot_outputs(rtl_out, golden_out):
    """Plots the RTL vs golden outputs"""
    plt.plot(rtl_out, label='RTL Output', marker='o')
    plt.plot(golden_out, label='Golden Reference', marker='x')
    plt.title("Kalman Filter Output Comparison")
    plt.xlabel("Time Step")
    plt.ylabel("Output")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.savefig('results/kalman_output_comparison.png')
    plt.show()

if __name__ == '__main__':
    rtl_output = load_output(rtl_output_file)
    golden_output = load_output(golden_output_file)

    print(f"Loaded {len(rtl_output)} RTL values and {len(golden_output)} golden values")

    passed = compare_outputs(rtl_output, golden_output, tolerance)

    plot_outputs(rtl_output, golden_output)

    if passed:
        print("✅ Validation Passed!")
    else:
        print("❌ Validation Failed!")
